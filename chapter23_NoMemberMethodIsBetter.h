#pragma once

class chapter23_NoMemberMethodIsBetter
{
    // note: 멤버 함수보다는 비멤버 비프렌드 함수와 더 가까워지자

    // 객체 지향은 데이터 캡슐화를 목적으로 한다.
    // 그렇지 않은것들은 비멤버 함수로 빼서 유연성을 높이고 확장성을 높인다.
    // 컴파일 의존도도 낮출 수 있다.

    // 캡슐화 : 외부에서 볼 수 없도록 한다.
    // 밖에서 볼 수 없는 것들이 많아질수록 수정의 유연성이 커진다. (밖에서 수정하지않고 내부적으로만 논리가 맞으면 되므로)
    // 데이터에 접근하는 함수가 많을수록 캡슐화 정도는 낮아진다.

    // public 데이터의 경우 얼마나 많은 곳에서 접근하는지 모름
    // private 데이터의 경우, 해당 클래스의 멤버 + friend 클래스의 멤버 함수 만큼만 접근이 가능함
    // 이 관접에서 볼때, 비멤버 비프렌드 함수를 쓸 경우 private 데이터에 접근하는 멤버 함수가 줄어든다 -> 즉 캡슐화 정도가 높아진다.

    // 비멤버 비프렌드 함수를 같은 namespace 안에 둬서 자연스럽게 묶을 수 있음
    // 또 한가지로 주목할 부분은, 이런 유틸리티 함수들은 모두 하나의 파일에 정의하지 않고 여러 헤더에 나눠서 정의가 가능함
    // 예르들어 즐겨찾기 관련 헤더에 namespace WebBrowserStuff { .. } 를 하고
    // 쿠키 관련 헤더아 namespace WebBrowserStuff { .. } 를 또 할 수 있음
    // 이런식으로 필요한 헤더만 include하면 컴파일 의존성을 낮출 수 있음
    // 이처럼 namespace에 비멤버 비프렌드 함수를 정의하는것은 확장성을 높이고 의존성을 낮출 수 있다.

    // 반면 클래스 멤버 함수로 오게되면 이런것들을 쪼갤 수 없기 때문에 안쓰는 기능들도 모두 컴파일 해야하기 때문에 암울해짐
    // 클래스도 상속을 통해서 확장을 할 수 있긴한데 namespace 를 통해 하는것보다 별로
};