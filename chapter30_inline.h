#pragma once

// note: 인라인

// 장점
// 매크로보다 안전, 함수 호출 오버헤드 없음
// 숨겨진 이점 : 컴파일러는 함수호출이 없는 연속적 코드에 대해 최적화를 하기 때문에, 컴파일러 최적화에 용이해짐

// 단점
// 코드 크기 증가는 성능의 걸림돌 -> 프로그램 크기 증가, 페이징 횟수 증가, 캐시 적중률 감소
// 그런데, 인라인 함수가 굉장히 짧다면 오히려 함수보다 코드가 짧아지므로 프로그램도 작아지며 캐시 적중률도 증가한다!

// 암시적 인라인 후보
// 클래스 정의 안에 함수의 정의까지 넣으면 인라인 후보가 된다.

// 루프나 가상함수는 인라인이 될 수 없다. (가상함수는 런타임에 호출이 결정되므로)
// inline 키워드를 붙이는건 컴파일러에게 요청하는것이지 명령이 아니다.
// 대부분의 컴파일러에 인라인 실패시 경고메세지를 내주는 기능이 있다.
// 어떤 곳에서 인라인 함수의 주소를 취하는 코드가 있으면 이것은 인라인함수가 될 수 없다.(인라인은 함수가 아닌데 주소를 취하려면 함수가 되어야하니까)
// 함수 포인터를 통해 인라인 함수를 호출하면 해당 영역은 인라인화 되지 않음. (정상적인 호출에서는 인라인 되는데 반해)



